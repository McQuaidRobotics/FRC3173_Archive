// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.IgKNIGHTers.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3173.IgKNIGHTers.Robot;

/**
 * @author JohnMarangola
 */
public class DumpBalls extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private final double WAIT_SECONDS_GATE_OPEN = 2.5;
	
	private long StartMillis, CurrentMillis, CurrentDifferenceMillis, DesiredDifferenceMillis;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DumpBalls() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    	 
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	StartMillis = System.currentTimeMillis();
    	CurrentDifferenceMillis = System.currentTimeMillis();
    	DesiredDifferenceMillis = (long) (WAIT_SECONDS_GATE_OPEN * 1000);
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.fuelHandling.setGate(true);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	//check if it long enough
    	CurrentMillis = System.currentTimeMillis();
    	CurrentDifferenceMillis = (Math.abs(CurrentMillis - StartMillis));
    	if (CurrentDifferenceMillis >= DesiredDifferenceMillis)
    	{
    		return true;
    	}
    	else
    	{
    		 return false;
    	}
       
    }

    // Called once after isFinished returns true
    protected void end() {
    	// push gate back up so your not spillin!
    	Robot.fuelHandling.setGate(false);
    	//ask about this and you need to test what you do
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
