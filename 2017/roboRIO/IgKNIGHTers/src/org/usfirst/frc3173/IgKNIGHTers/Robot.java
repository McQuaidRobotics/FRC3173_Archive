// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.IgKNIGHTers;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3173.IgKNIGHTers.Utilities.IMU;
import org.usfirst.frc3173.IgKNIGHTers.commands.*;
import org.usfirst.frc3173.IgKNIGHTers.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drives drives;
    public static Gears gears;
    public static FuelHandling fuelHandling;
    public static Climber climber;
    public static Compressor_Shared_Functionality compressor_Shared_Functionality;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drives = new Drives();
        gears = new Gears();
        fuelHandling = new FuelHandling();
        climber = new Climber();
        compressor_Shared_Functionality = new Compressor_Shared_Functionality();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putString("Autonomous Obstacle", "0");
        autonomousCommand = new AutonomousCommand();
        new Thread(new Runnable() {
			@Override
			public void run() {
				//Vision vision=new Vision();
				IMU imu = new IMU();
				AutonomousDrive.RRIMU=imu;
				//VisionAutoGear.RRVision=vision;
				imu.IMUIni();
				System.out.print("IMU ini");
				/*if (vision.isConnected()){
					System.out.print("Vision Connected");
				}*/
								
				int wait = 0;
				while (true) {
					if(wait < 700){
						wait++;
					}else if (wait == 700) {	
						imu.calibration();
					}
					imu.updateOrientation();
					//if (vision.isConnected()){vision.update();}
					try {
						Thread.sleep(10);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}).start();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	if(autonomousCommand!=null){
    		autonomousCommand.cancel();
    	}
    	try{
    		autonomousCommand = new AutonomousCommand();
    		if (autonomousCommand != null) autonomousCommand.start();
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        updateSmartDashboard();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void updateSmartDashboard(){
	    try{
    		SmartDashboard.putNumber("Talon 1 Current", RobotMap.drivesRightMotorTop.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 2 Current", RobotMap.drivesLeftMotorTop.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 3 Current", RobotMap.drivesRightMotorBottom.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 4 Current", RobotMap.drivesLeftMotorBottom.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 5 Current", RobotMap.climberclimbingMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 6 Current", RobotMap.fuelHandlingAcquireFuel.getOutputCurrent());
	    	SmartDashboard.putBoolean("Solenoid 1 state", RobotMap.fuelHandlingDumpGate.get());
	    	SmartDashboard.putString("Solenoid 6, 7 state", (RobotMap.gearsGearPnuematic.get()).toString());
	    	//SmartDashboard.putNumber("Compressor", RobotMap.compressor_Shared_FunctionalityRobotCompressor.getCompressorCurrent());
	    }catch(Exception e){
	    	System.out.println(e);
	    }
    }
    public void testPeriodic() {
        LiveWindow.run();
    }
}
