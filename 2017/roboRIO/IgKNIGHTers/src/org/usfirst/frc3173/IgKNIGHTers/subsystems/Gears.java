
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.IgKNIGHTers.subsystems;

import org.usfirst.frc3173.IgKNIGHTers.RobotMap;
import org.usfirst.frc3173.IgKNIGHTers.commands.*;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.command.Subsystem;


/**

 * @author JohnMarangola
 */
public class Gears extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DoubleSolenoid gearPnuematic = RobotMap.gearsGearPnuematic;
	//private final Solenoid gear1Pnuematic= RobotMap.gearPnuematic1;
	//private final Solenoid gear2Pnuematic=RobotMap.gearPnuematic2;
    private final DigitalInput gearSensor = RobotMap.gearsGearSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	
    	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());

    }
   /* public void openPnuematic(){
    	 gear1Pnuematic.set(true);
    	 gear2Pnuematic.set(true);
    }*/
   /* public void closePnuematic(){
    	gear1Pnuematic.set(false);
    	gear2Pnuematic.set(false);
   }*/

    public void offPnumatic(){
    	//gearPnuematic.set(DoubleSolenoid.Value.kOff);
    }
     public boolean PnuematicOperations(boolean isForward){
    	// s
    	 if (isForward){
    		 gearPnuematic.set(DoubleSolenoid.Value.kForward);
    		 return false;
    	 }
    	 else{
    		gearPnuematic.set(DoubleSolenoid.Value.kReverse);	
    		 return true;
    	 }
    	
    	
    }
   
}

