// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.IgKnighters2018;

import org.usfirst.frc3173.IgKnighters2018.commandgroups.AcquisitionGroupIntakeFinish;
import org.usfirst.frc3173.IgKnighters2018.commandgroups.AcquisitionGroupReverseFinish;
import org.usfirst.frc3173.IgKnighters2018.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc3173.IgKnighters2018.subsystems.*;
import org.usfirst.frc3173.IgKnighters2018.subsystems.Elevator.ElevatorStates;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 * @TEAM
 */
public class OI {
    // CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());



    public Joystick driverGamepad;
    public Joystick operatorGamepad;

    public static final int BUTTON_A = 1;
    public static final int BUTTON_B = 2;
    public static final int BUTTON_X = 3;
    public static final int BUTTON_Y = 4;
    public static final int BUMPER_LEFT = 5;
    public static final int BUMPER_RIGHT = 6;
    public static final int BUTTON_BACK = 7;
    public static final int BUTTON_START = 8;
    public static final int BUTTON_LEFT_STICK = 9;
    public static final int BUTTON_RIGHT_STICK = 10;
    
    public OI() {
    	//init gamepad
        driverGamepad = new Joystick(0);
        operatorGamepad = new Joystick(1);
        
        //buttons
        JoystickButton Driver_Button_A = new JoystickButton(driverGamepad, BUTTON_A);
        JoystickButton Driver_Button_B = new JoystickButton(driverGamepad, BUTTON_B);
        JoystickButton Driver_Button_X = new JoystickButton(driverGamepad, BUTTON_X);
        JoystickButton Driver_Button_Y = new JoystickButton(driverGamepad, BUTTON_Y);
        JoystickButton Driver_Bumper_Left = new JoystickButton(driverGamepad, BUMPER_LEFT);
        JoystickButton Driver_Bumper_Right = new JoystickButton(driverGamepad, BUMPER_RIGHT);
        JoystickButton Driver_Button_Back = new JoystickButton(driverGamepad, BUTTON_BACK);
        JoystickButton Driver_Button_Start = new JoystickButton(driverGamepad, BUTTON_START);
        JoystickButton Driver_Button_Left_Stick = new JoystickButton(driverGamepad, BUTTON_LEFT_STICK);
        JoystickButton Driver_Button_Right_Stick = new JoystickButton(driverGamepad, BUTTON_RIGHT_STICK);
        
        //whenPressed() actions
        //Driver_Button_A.whenPressed(new ClimberLock());
        //Driver_Button_B.whenPressed(new ElevatorShift());
        Driver_Button_B.whenPressed(new DrivesTurnAround());
        Driver_Button_X.whenPressed(new DrivesShift());
        //Driver_Bumper_Left.whenPressed(new AcquisitionIntake());
        //Driver_Bumper_Right.whenPressed(new AcquisitionReverse());
        //Driver_Bumper_Left.whenReleased(new AcquisitionStop());
        //Driver_Bumper_Right.whenReleased(new AcquisitionStop());
        //Driver_Button_Start.whenPressed(new AcquisitionOpen());
        //Driver_Button_Back.whenPressed(new AcquisitionClose());
        Driver_Button_Y.whenPressed(new AcquisitionStop());
        //Driver_Button_Back.whenPressed(new DrivesShiftMaxSpeed(DrivesShiftMaxSpeed.SpeedMaxStates.HALF));
        //Driver_Button_Start.whenPressed(new DrivesShiftMaxSpeed());
        //Driver_Button_Left_Stick.whenPressed(new DrivesShiftOpState(Drives.OperativeState.ARCADE_DRIVE));
        //Driver_Button_Right_Stick.whenPressed(new DrivesShiftOpState(Drives.OperativeState.TANK_DRIVE));
        
        JoystickButton Operator_Button_A = new JoystickButton(operatorGamepad, BUTTON_A);
        JoystickButton Operator_Button_B = new JoystickButton(operatorGamepad, BUTTON_B);
        JoystickButton Operator_Button_X = new JoystickButton(operatorGamepad, BUTTON_X);
        JoystickButton Operator_Button_Y = new JoystickButton(operatorGamepad, BUTTON_Y);
        JoystickButton Operator_Bumper_Left = new JoystickButton(operatorGamepad, BUMPER_LEFT);
        JoystickButton Operator_Bumper_Right = new JoystickButton(operatorGamepad, BUMPER_RIGHT);
        JoystickButton Operator_Button_Back = new JoystickButton(operatorGamepad, BUTTON_BACK);
        JoystickButton Operator_Button_Start = new JoystickButton(operatorGamepad, BUTTON_START);
        JoystickButton Operator_Button_Left_Stick = new JoystickButton(operatorGamepad, BUTTON_LEFT_STICK);
        JoystickButton Operator_Button_Right_Stick = new JoystickButton(operatorGamepad, BUTTON_RIGHT_STICK);
        
        //whenPressed() actions
        Operator_Button_A.whenPressed(new ElevatorChangePosition(ElevatorStates.FLOOR));
        Operator_Button_B.whenPressed(new ElevatorChangePosition(ElevatorStates.VAULT));
        Operator_Button_X.whenPressed(new ElevatorChangePosition(ElevatorStates.SWITCH));
        Operator_Button_Y.whenPressed(new ElevatorChangePosition(ElevatorStates.SCALE));
        
        Operator_Bumper_Left.whenPressed(new AcquisitionIntake());
        Operator_Bumper_Right.whenPressed(new AcquisitionReverse());
        
        Operator_Bumper_Left.whenReleased(new AcquisitionStop());
        Operator_Bumper_Right.whenReleased(new AcquisitionStop());
        
        Operator_Button_Left_Stick.whenPressed(new AcquisitionToggleOpenness());
    }
}

