// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.IgKnighters2018.subsystems;

import org.usfirst.frc3173.IgKnighters2018.Robot;
import org.usfirst.frc3173.IgKnighters2018.RobotMap;
import org.usfirst.frc3173.IgKnighters2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DoubleSolenoid;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * @John Marangola
 */
public class Climber extends Subsystem {

    private boolean isOut;
    private final DoubleSolenoid climberLock = RobotMap.climberLock;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	climberLock.set(DoubleSolenoid.Value.kReverse);
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	//SmartDashboard.putString("[Climber] climberLockVal", climberLock.get().toString());
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void lockClimber()
    {
    	//optimized for in season debugging
    	System.out.println(getStatus());
    	if (getStatus().equals("Forward")) {
    		
    		//System.out.println("Retracting Climber Pnuematic...");
    		climberLock.set(DoubleSolenoid.Value.kReverse);
    		
    		if (getStatus().equals("Forward")) {
    			//System.out.println("Failed to Lock... retrying again now");
    			climberLock.set(DoubleSolenoid.Value.kReverse);
    			
    			if (getStatus().equals("Forward"))	{
    				//System.err.println("Failure to deploy climberLock mechanism.. this is a mechanical issue (not our fault)");
    			}
    		if (getStatus().equals("Reverse")) {	System.out.println("Retracted");
    			
    		}
    		}		
    	}
    	else if (getStatus().equals("Reverse")) {
    		//System.out.println("Retracting Climber Pnuematic");
    		climberLock.set(DoubleSolenoid.Value.kForward);
    		//System.out.println("Climber arm retracted");
    	}
    	else {
    		//System.out.println("Error with compressor and pnuematic controller (electrical)"); 
    	}
    	
    }
    public String getStatus()
    {
    	if (climberLock.get().equals(DoubleSolenoid.Value.kForward))
    		return "Forward";
    	else if (climberLock.get().equals(DoubleSolenoid.Value.kReverse))
    		return "Reverse";
    	return "Off";
    }

}

