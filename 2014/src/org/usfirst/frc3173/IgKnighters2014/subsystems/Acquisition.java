// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3173.IgKnighters2014.subsystems;
import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import org.usfirst.frc3173.IgKnighters2014.RobotMap;
import org.usfirst.frc3173.IgKnighters2014.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 *
 */
public class Acquisition extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DoubleSolenoid acquisitionPneumatic = RobotMap.acquisitionAcquisitionPneumatic;
    AnalogChannel ballDetector = RobotMap.acquisitionBallDetector;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static final double[] BALLDETECTOR_BOUND = {1, 2};
    //public boolean spunUp = false;
    public double clawWheelSpeed = 0;
    public boolean clawOpen = false;
    
    public void acquisitionClawOpen(){
        acquisitionPneumatic.set(DoubleSolenoid.Value.kForward);
        clawOpen = true;
        SmartDashboard.putBoolean("Claw open", clawOpen);
    }
    
    public void acquisitionClawClose(){
        acquisitionPneumatic.set(DoubleSolenoid.Value.kReverse);
        clawOpen = false;
        SmartDashboard.putBoolean("Claw open", clawOpen);
    }
    
    public boolean isClawOpen(){
        return clawOpen;
    }
    
    private long detectorFailTime = 0;
    /**
     * Has a ball been detected in the claw?
     * @param failState What to return if the detector fails.
     * @return Whether a ball has been detected (or failState if the detector has failed)
     */
    public boolean ballDetected(final boolean failState) {
        boolean ret;
        final double v = ballDetector.getVoltage();
        if (v < 1) {
            if (detectorFailTime == 0) {
                detectorFailTime = System.currentTimeMillis();
            }
            ret =  failState;
        } else {
            detectorFailTime = 0;
            if (BALLDETECTOR_BOUND[0] < v && v < BALLDETECTOR_BOUND[1]) {
                ret = true;
            } else {
                ret = false;
            }
        }
        if (detectorFailTime != 0 && detectorFailTime + 300 < System.currentTimeMillis()) {
            SmartDashboard.putString("Ball Detector Error", "Ball Detector failure!");
        } else {
            SmartDashboard.putString("Ball Detector Error", "");
        }
        SmartDashboard.putBoolean("Ball Detected", ret);
        return ret;
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}
