// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3173.IgKnighters2014.subsystems;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import org.usfirst.frc3173.IgKnighters2014.RobotMap;
import org.usfirst.frc3173.IgKnighters2014.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3173.IgKnighters2014.utilities.CANJaguar;
/**
 *
 */
public class Elevation extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANJaguar elevationMotor = RobotMap.elevationElevationMotor;
    Encoder encoder = RobotMap.elevationEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public boolean encoderResetToggle=false;
    public boolean encoderResetSecondToggle=false;
    public boolean encoderResetting=false;
    public final double TOLERANCE=1;
    public Elevation(){
        encoder.setDistancePerPulse(1);
        encoder.reset();
    }
    public void setTiltPosition(double angle){
        double error = getAngle() - angle;
        if (Math.abs(error) <= TOLERANCE) {
            setTiltSpeed(0);
        } else if (error < 0) {
            setTiltSpeed(.08);
        } else {
            setTiltSpeed(-.08);
        }
    }
    
    public void setTiltSpeed(double speed) {
        elevationMotor.setX(speed);
        SmartDashboard.putNumber("Position: ", getAngle());
        SmartDashboard.putBoolean("Elevation forward limit hit", !elevationMotor.getForwardLimitOK());
        SmartDashboard.putBoolean("Elevation reverse limit hit", !elevationMotor.getReverseLimitOK());
    }
    /*public void resetEncoder(){
        if(!encoderResetToggle){
            disable();
            elevationMotor.setX(-.5);
        }
        if(!elevationMotor.getReverseLimitOK()){
            elevationMotor.setX(0);
            enable();
            encoderResetToggle=true;
            encoder.reset();
            setSetpoint(11.5);
        }
        if(getSetpoint()==11/5&&onTarget()){
            encoder.reset();
            setSetpoint(90);
        }
        SmartDashboard.putNumber("Position: ", getAngle());
        SmartDashboard.putBoolean("Elevation forward limit hit", !elevationMotor.getForwardLimitOK());
        SmartDashboard.putBoolean("Elevation reverse limit hit", !elevationMotor.getReverseLimitOK());
        SmartDashboard.putNumber("Dat Setpoint: ", getSetpoint());
    }*/
    public double getAngle(){
        return encoder.getDistance();
    }
    
    public static class DAngle {
        private boolean direction;
        private double angle;
        public static final boolean FORWARD = true;
        public static final boolean REVERSE = false;
        public DAngle (double angle) {
            if (angle < 90) {
                this.angle = angle;
                this.direction = FORWARD;
            } else {
                this.angle = 180-angle;
                this.direction = REVERSE;
            }
        }
        public DAngle (double angle, boolean direction) {
            this.angle = angle;
            this.direction = direction;
        }
        public double toAngle() {
            if (direction == FORWARD) {
                return angle;
            } else {
                return 180+angle;
            }
        }
        public String toString() {
            if (direction == FORWARD) {
                return angle+" F";
            } else {
                return angle+" R";
            }
        }
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new TiltWithJoysticks());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	setDefaultCommand(new TiltWithJoysticks());
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}
