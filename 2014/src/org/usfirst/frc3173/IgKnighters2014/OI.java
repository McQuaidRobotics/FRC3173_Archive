// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3173.IgKnighters2014;
import org.usfirst.frc3173.IgKnighters2014.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
   public static double JOYSTICK_ZERO_TOLERANCE = .05;
   
   public static double removeDrift(double joystickValue) {
       if (Math.abs(joystickValue) > JOYSTICK_ZERO_TOLERANCE) {
           return joystickValue;
       } else {
           return 0;
       }
   }
   
   public static double squareInputs(double joystickValue) {
       if (joystickValue > 0) {
           return joystickValue*joystickValue;
       } else {
           return -joystickValue*joystickValue;
       }
   }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton clawButton;
    public Joystick rightDriveJoystick;
    public JoystickButton shifterButton;
    public Joystick leftDriveJoystick;
    public JoystickButton shoot;
    public JoystickButton prime;
    public JoystickButton openCloseClaw;
    public JoystickButton passingShoot;
    public JoystickButton automaticClaw;
    public Joystick rightJoystick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightJoystick = new Joystick(2);
        
        automaticClaw = new JoystickButton(rightJoystick, 3);
        automaticClaw.whileHeld(new ClawAutomaticCatch());
        passingShoot = new JoystickButton(rightJoystick, 4);
        passingShoot.whenPressed(new PassShoot());
        openCloseClaw = new JoystickButton(rightJoystick, 5);
        openCloseClaw.whenPressed(new ClawToggle());
        prime = new JoystickButton(rightJoystick, 6);
        prime.whenPressed(new ShooterPrime());
        shoot = new JoystickButton(rightJoystick, 1);
        shoot.whenPressed(new ShooterShoot());
        leftDriveJoystick = new Joystick(3);
        
        shifterButton = new JoystickButton(leftDriveJoystick, 1);
        shifterButton.whileHeld(new ShifterToggle());
        rightDriveJoystick = new Joystick(1);
        
        clawButton = new JoystickButton(rightDriveJoystick, 1);
        clawButton.whenPressed(new ClawToggle());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Encoder Reset", new EncoderReset());
        SmartDashboard.putData("Pass Shoot", new PassShoot());
        SmartDashboard.putData("Prep Shooter", new PrepShooter());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getRightDriveJoystick() {
        return rightDriveJoystick;
    }
    public Joystick getLeftDriveJoystick() {
        return leftDriveJoystick;
    }
    public Joystick getRightJoystick() {
        return rightJoystick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
