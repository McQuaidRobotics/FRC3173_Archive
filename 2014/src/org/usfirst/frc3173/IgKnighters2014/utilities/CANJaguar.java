package org.usfirst.frc3173.IgKnighters2014.utilities;

import edu.wpi.first.wpilibj.CANJaguar.ControlMode;
import edu.wpi.first.wpilibj.CANJaguar.NeutralMode;
import edu.wpi.first.wpilibj.CANJaguar.PositionReference;
import edu.wpi.first.wpilibj.CANJaguar.SpeedReference;
import edu.wpi.first.wpilibj.MotorSafety;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.livewindow.LiveWindowSendable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.tables.ITable;
import java.util.Enumeration;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;

/**
 * A replacement for WPIlib's CANJaguar which attempts to resurrect any dead Jaguars
 * automagically. Jaguars can be uninstantiated in the middle of a match if one
 * of them gets accidentally turned off (eg. if a breaker trips momentarily);
 * this will catch that happening and attempt to re-instantiate the Jaguar.
 * All of the methods are included here; JavaDoc for wrapper methods is copied
 * from the WPI CANJaguar code.
 * @author Wolfgang Faust
 */
public class CANJaguar implements LiveWindowSendable, MotorSafety, PIDOutput, SpeedController {
  /**
    * The Jaguar represented by this class.
    */
   protected edu.wpi.first.wpilibj.CANJaguar m_jaguar;
   /**
    * The ID of the CANJaguar represented by this class (used to re-instantiate).
    */
   protected int m_id;   
   protected double m_currentx;
   protected int m_currentpotentiometerturns;
   
   protected static final double  DEFAULT_DOUBLE  = 0;
   protected static final int     DEFAULT_INT     = 0;
   protected static final short   DEFAULT_SHORT   = 0;
   protected static final byte    DEFAULT_BYTE    = 0;
   protected static final boolean DEFAULT_BOOLEAN = false;
   protected static final String  DEFAULT_STRING  = "";
   protected static final ControlMode DEFAULT_CONTROLMODE = null;
   protected static final PositionReference DEFAULT_POSITIONREFERENCE = null;
   protected static final SpeedReference DEFAULT_SPEEDREFERENCE = null;
   protected static final ITable DEFAULT_ITABLE = null;
   
   protected static Vector jaguarlist = new Vector();
   public static void updateDashboardJaguarList() {
       try {
            for (Enumeration e = jaguarlist.elements() ; e.hasMoreElements() ;) {
                 CANJaguar j = (CANJaguar) e.nextElement();                     
                 j.updateDashboard();
            }
       } catch (Exception e) {
            e.printStackTrace();
       }
   }
   
   /**
    * Set up a Jaguar!
    * @param id The CAN id of the jaguar
    * @throws CANTimeoutException Never thrown, but needed so the RobotMap generated by RobotBuilder works as expected.
    */
   public CANJaguar (int id) throws CANTimeoutException {
           this(id, true);
   }
   /**
    * Make an instance of a Jaguar motor controller which can be resurrected.
    * @param id The jaguar's ID on the CAN bus.
    * @param slowRamp Whether the ramping should be fast or slow.
    */
   public CANJaguar (int id, boolean slowRamp) {
           m_id = id;
           instantiate();
           if (slowRamp) {
                   setVoltageRampRate(48);
           } else {
                   setVoltageRampRate(192);
           }
           jaguarlist.addElement(this);
   }
   //public void updateDashboard() {
   //    updateDashboard(false);
   //}
   public void updateDashboard() {
       double x;
       boolean ok;
       if (m_jaguar == null) {
           instantiate();
           x=m_currentx;
           ok=false;
       } else {
            try {
                x = m_jaguar.getX();
                ok= true;
            } catch (CANTimeoutException e) {
                x = m_currentx;
                ok= false;
            }
       }
       if (m_jaguar != null) {
        try {
            SmartDashboard.putNumber("Jaguar "+m_id+" current", m_jaguar.getOutputCurrent());
        } catch (CANTimeoutException e) {
            SmartDashboard.putNumber("Jaguar "+m_id+" current", 0);
        }
       }
       SmartDashboard.putNumber("Jaguar "+m_id+" X", x);
       SmartDashboard.putBoolean("Jaguar "+m_id+" status", ok);
   }
   /**
    * Handle a CANTimeoutException by attempting to reinstantiate the Jaguar
    * @param e The original CANTimeoutException that caused jaguarErr() to be called.
    */
   protected void jaguarErr(CANTimeoutException e) {
       instantiate();
   }
   protected void jaguarErr(NullPointerException e) {
       instantiate();
   }
   /**
    * Attempt to (re-?)instantiate the Jaguar, printing the Exception if it fails.
    * @return Whether the Jaguar was successfully instantiated.
    */
   protected boolean instantiate() {
       boolean ret= true;
       try {
                m_jaguar = new edu.wpi.first.wpilibj.CANJaguar(m_id);
        } catch (CANTimeoutException e) {
                /// *** IMPORTANT: Do NOT call jaguarErr() here!!!
                /// Doing so may cause an infinite loop!
                //Log.out.println("Could not instantiate jaguar id "+m_id);
                //System.out.println("Jaguar error on id: "+m_id);
                //e.printStackTrace();
                ret = false;
        }
        return ret;
   }

/**
* Change the control mode of this Jaguar object.
*
* After changing modes, configure any PID constants or other settings needed
* and then enableControl() to actually change the mode on the Jaguar.
*
* @param controlMode The new mode.
*/
    public void changeControlMode(ControlMode controlMode) {
        try {
            m_jaguar.changeControlMode(controlMode);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.changeControlMode(controlMode);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Configure how many codes per revolution are generated by your encoder.
*
* @param codesPerRev The number of counts per revolution in 1X mode.
*/
    public void configEncoderCodesPerRev(int codesPerRev) {
        try {
            m_jaguar.configEncoderCodesPerRev(codesPerRev);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.configEncoderCodesPerRev(codesPerRev);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Configure how long the Jaguar waits in the case of a fault before resuming operation.
*
* Faults include over temerature, over current, and bus under voltage.
* The default is 3.0 seconds, but can be reduced to as low as 0.5 seconds.
*
* @param faultTime The time to wait before resuming operation, in seconds.
*/
    public void configFaultTime(double faultTime) {
       try {
            m_jaguar.configFaultTime(faultTime);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.configFaultTime(faultTime);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Configure the maximum voltage that the Jaguar will ever output.
*
* This can be used to limit the maximum output voltage in all modes so that
* motors which cannot withstand full bus voltage can be used safely.
*
* @param voltage The maximum voltage output by the Jaguar.
*/
    public void configMaxOutputVoltage(double voltage) {
        try {
            m_jaguar.configMaxOutputVoltage(voltage);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.configMaxOutputVoltage(voltage);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Configure what the controller does to the H-Bridge when neutral (not driving the output).
*
* This allows you to override the jumper configuration for brake or coast.
*
* @param mode Select to use the jumper setting or to override it to coast or brake.
*/
    public void configNeutralMode(NeutralMode mode) {
        try {
            m_jaguar.configNeutralMode(mode);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.configNeutralMode(mode);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Configure the number of turns on the potentiometer.
*
* There is no special support for continuous turn potentiometers.
* Only integer numbers of turns are supported.
*
* @param turns The number of turns of the potentiometer
*/
    public void configPotentiometerTurns(int turns) {
        m_currentpotentiometerturns = turns;
        try {
            m_jaguar.configPotentiometerTurns(turns);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.configPotentiometerTurns(turns);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Configure Soft Position Limits when in Position Controller mode.
*
* When controlling position, you can add additional limits on top of the limit switch inputs
* that are based on the position feedback.  If the position limit is reached or the
* switch is opened, that direction will be disabled.
*
* @param forwardLimitPosition The position that if exceeded will disable the forward direction.
* @param reverseLimitPosition The position that if exceeded will disable the reverse direction.
*/
    public void configSoftPositionLimits(double forwardLimitPosition, double reverseLimitPosition) {
        try {
            m_jaguar.configSoftPositionLimits(forwardLimitPosition, reverseLimitPosition);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.configSoftPositionLimits(forwardLimitPosition, reverseLimitPosition);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Common interface for disabling a motor.
*
* Needed by the SpeedControl interface (swallows CANTimeoutExceptions).
*
* @deprecated Use disableControl instead.
*/
    public void disable() {
        this.disableControl();
    }

/**
* Disable the closed loop controller.
*
* Stop driving the output based on the feedback.
*/
    public void disableControl() {
        try {
            m_jaguar.disableControl();
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.disableControl();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Disable Soft Position Limits if previously enabled.
*
* Soft Position Limits are disabled by default.
*/
    public void disableSoftPositionLimits() {
        try {
            m_jaguar.disableSoftPositionLimits();
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.disableSoftPositionLimits();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Enable the closed loop controller.
*
* Start actually controlling the output based on the feedback.
*/
    public void enableControl() {
        try {
            m_jaguar.enableControl();
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.enableControl();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Enable the closed loop controller.
*
* Start actually controlling the output based on the feedback.
* If starting a position controller with an encoder reference,
* use the encoderInitialPosition parameter to initialize the
* encoder state.
* @param encoderInitialPosition Encoder position to set if position with encoder reference.  Ignored otherwise.
*/
    public void enableControl(double encoderInitialPosition) {
        try {
            m_jaguar.enableControl(encoderInitialPosition);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.enableControl(encoderInitialPosition);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Get the recently set outputValue setpoint.
*
* Needed by the SpeedControl interface (swallows CANTimeoutExceptions).
*
* @deprecated Use getX instead.
* @return The most recently set outputValue setpoint.
*/
    public double get() {
        return this.getX();
    }

/**
* Get the voltage at the battery input terminals of the Jaguar.
*
* @return The bus voltage in Volts.
*/
    public double getBusVoltage() {
        try {
            return m_jaguar.getBusVoltage();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getBusVoltage();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_DOUBLE;
    }

/**
* Get the active control mode from the Jaguar.
*
* Ask the Jag what mode it is in.
*
* @return ControlMode that the Jag is in.
*/
    public ControlMode getControlMode() {
        try {
            return m_jaguar.getControlMode();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getControlMode();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_CONTROLMODE;
    }

/**
* Get the Differential gain of the controller.
*
* @return The differential gain.
*/
    public double getD() {
        try {
            return m_jaguar.getD();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getD();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_DOUBLE;
    }

    public String getDescription() {
        return m_jaguar.getDescription();
    }

    public double getExpiration() {
        return m_jaguar.getExpiration();
    }

/**
* Get the status of any faults the Jaguar has detected.
*
* @return A bit-mask of faults defined by the "Faults" enum class.
*/
    public short getFaults() {
        try {
            return m_jaguar.getFaults();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getFaults();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_SHORT;
    }

/**
* Get the version of the firmware running on the Jaguar.
*
* @return The firmware version.  0 if the device did not respond.
*/
    public int getFirmwareVersion() {
        try {
            return m_jaguar.getFirmwareVersion();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getFirmwareVersion();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_INT;
    }

/**
* Get the status of the forward limit switch.
*
* @return The motor is allowed to turn in the forward direction when true.
*/
    public boolean getForwardLimitOK() {
        try {
            return m_jaguar.getForwardLimitOK();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getForwardLimitOK();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_BOOLEAN;
    }

/**
* Get the version of the Jaguar hardware.
*
* @return The hardware version. 1: Jaguar,  2: Black Jaguar
*/
    public byte getHardwareVersion() {
        try {
            return m_jaguar.getHardwareVersion();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getHardwareVersion();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_BYTE;
    }

/**
* Get the Intregral gain of the controller.
*
* @return The integral gain.
*/
    public double getI() {
        try {
            return m_jaguar.getI();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getI();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_DOUBLE;
    }

/**
* Get the current through the motor terminals of the Jaguar.
*
* @return The output current in Amps.
*/
    public double getOutputCurrent() {
        try {
            return m_jaguar.getOutputCurrent();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getOutputCurrent();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_DOUBLE;
    }

/**
* Get the voltage being output from the motor terminals of the Jaguar.
*
* @return The output voltage in Volts.
*/
    public double getOutputVoltage() {
        try {
            return m_jaguar.getOutputVoltage();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getOutputVoltage();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_DOUBLE;
    }

/**
* Get the Proportional gain of the controller.
*
* @return The proportional gain.
*/
    public double getP() {
        try {
            return m_jaguar.getP();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getP();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_DOUBLE;
    }

/**
* Get the position of the encoder or potentiometer.
*
* @return The position of the motor based on the configured feedback.
*/
    public double getPosition() {
        try {
            return m_jaguar.getPosition();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getPosition();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_DOUBLE;
    }

/**
* Get the reference source device for position controller mode.
*
* @return A PositionReference indicating the currently selected reference device for position controller mode.
*/
    public PositionReference getPositionReference() {
        try {
            return m_jaguar.getPositionReference();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getPositionReference();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_POSITIONREFERENCE;
    }

/**
* Check if the Jaguar's power has been cycled since this was last called.
*
* This should return true the first time called after a Jaguar power up,
* and false after that.
*
* @return The Jaguar was power cycled since the last call to this function.
*/
    public boolean getPowerCycled() {
        try {
            return m_jaguar.getPowerCycled();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getPowerCycled();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_BOOLEAN;
    }

/**
* Get the status of the reverse limit switch.
*
* @return The motor is allowed to turn in the reverse direction when true.
*/
    public boolean getReverseLimitOK() {
        try {
            return m_jaguar.getReverseLimitOK();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getReverseLimitOK();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_BOOLEAN;
    }

/*
* Live Window code, only does anything if live window is activated.
*/
    public String getSmartDashboardType() {
        return m_jaguar.getSmartDashboardType();
    }

/**
* Get the speed of the encoder.
*
* @return The speed of the motor in RPM based on the configured feedback.
*/
    public double getSpeed() {
        try {
            return m_jaguar.getSpeed();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getSpeed();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_DOUBLE;
    }

/**
* Get the reference source device for speed controller mode.
*
* @return A SpeedReference indicating the currently selected reference device for speed controller mode.
*/
    public SpeedReference getSpeedReference() {
        try {
            return m_jaguar.getSpeedReference();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getSpeedReference();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_SPEEDREFERENCE;
    }

/**
* {@inheritDoc}
*/
    public ITable getTable() {
        return m_jaguar.getTable();
    }

/**
* Get the internal temperature of the Jaguar.
*
* @return The temperature of the Jaguar in degrees Celsius.
*/
    public double getTemperature() {
        try {
            return m_jaguar.getTemperature();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            return m_jaguar.getTemperature();
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_DOUBLE;
    }

/**
* Get the recently set outputValue setpoint.
*
* The scale and the units depend on the mode the Jaguar is in.
* In PercentVbus Mode, the outputValue is from -1.0 to 1.0 (same as PWM Jaguar).
* In Voltage Mode, the outputValue is in Volts.
* In Current Mode, the outputValue is in Amps.
* In Speed Mode, the outputValue is in Rotations/Minute.
* In Position Mode, the outputValue is in Rotations.
*
* @return The most recently set outputValue setpoint.
*/
    public double getX() {
        try {
            m_currentx = m_jaguar.getX();
            return m_currentx;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_currentx = m_jaguar.getX();
            return m_currentx;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        return DEFAULT_DOUBLE;
    }

/**
* {@inheritDoc}
*/
    public void initTable(ITable subtable) {
        m_jaguar.initTable(subtable);
    }

    public boolean isAlive() {
        return m_jaguar.isAlive();
    }

    public boolean isSafetyEnabled() {
        return m_jaguar.isSafetyEnabled();
    }

/**
* Write out the PID value as seen in the PIDOutput base object.
*
* @deprecated Use setX instead.
* @param output Write out the percentage voltage value as was computed by the PIDController
*/
    public void pidWrite(double output) {
        m_jaguar.pidWrite(output);
    }

/**
* Set the output set-point value.
*
* Needed by the SpeedControl interface (swallows CANTimeoutExceptions).
*
* @deprecated Use setX instead.
* @param outputValue The set-point to sent to the motor controller.
*/
    public void set(double outputValue) {
        set(outputValue, (byte) 0);
    }

/**
* Set the output set-point value.
*
* Needed by the SpeedControl interface (swallows CANTimeoutExceptions).
*
* @deprecated Use setX instead.
* @param outputValue The set-point to sent to the motor controller.
* @param syncGroup The update group to add this set() to, pending updateSyncGroup().  If 0, update immediately.
*/
    public void set(double outputValue, byte syncGroup) {
        this.setX(outputValue, syncGroup);
    }

    public void setExpiration(double timeout) {
        m_jaguar.setExpiration(timeout);
    }

/**
* Set the P, I, and D constants for the closed loop modes.
*
* @param p The proportional gain of the Jaguar's PID controller.
* @param i The integral gain of the Jaguar's PID controller.
* @param d The differential gain of the Jaguar's PID controller.
*/
    public void setPID(double p, double i, double d) {
        try {
            m_jaguar.setPID(p, i, d);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.setPID(p, i, d);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Set the reference source device for position controller mode.
*
* Choose between using and encoder and using a potentiometer
* as the source of position feedback when in position control mode.
*
* @param reference Specify a PositionReference.
*/
    public void setPositionReference(PositionReference reference) {
        try {
            m_jaguar.setPositionReference(reference);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.setPositionReference(reference);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

    public void setSafetyEnabled(boolean enabled) {
        m_jaguar.setSafetyEnabled(enabled);
    }

/**
* Set the reference source device for speed controller mode.
*
* Choose encoder as the source of speed feedback when in speed control mode.
*
* @param reference Specify a SpeedReference.
*/
    public void setSpeedReference(SpeedReference reference) {
        try {
            m_jaguar.setSpeedReference(reference);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.setSpeedReference(reference);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Set the maximum voltage change rate.
*
* When in percent voltage output mode, the rate at which the voltage changes can
* be limited to reduce current spikes.  Set this to 0.0 to disable rate limiting.
*
* @param rampRate The maximum rate of voltage change in Percent Voltage mode in V/s.
*/
    public void setVoltageRampRate(double rampRate) {
        try {
            m_jaguar.setVoltageRampRate(rampRate);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.setVoltageRampRate(rampRate);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* Set the output set-point value.
*
* The scale and the units depend on the mode the Jaguar is in.
* In PercentVbus Mode, the outputValue is from -1.0 to 1.0 (same as PWM Jaguar).
* In Voltage Mode, the outputValue is in Volts.
* In Current Mode, the outputValue is in Amps.
* In Speed Mode, the outputValue is in Rotations/Minute.
* In Position Mode, the outputValue is in Rotations.
*
* @param outputValue The set-point to sent to the motor controller.
*/
    public void setX(double outputValue) {
        this.setX(outputValue, (byte) 0);
    }

/**
* Set the output set-point value.
*
* The scale and the units depend on the mode the Jaguar is in.
* In PercentVbus Mode, the outputValue is from -1.0 to 1.0 (same as PWM Jaguar).
* In Voltage Mode, the outputValue is in Volts.
* In Current Mode, the outputValue is in Amps.
* In Speed Mode, the outputValue is in Rotations/Minute.
* In Position Mode, the outputValue is in Rotations.
*
* @param outputValue The set-point to sent to the motor controller.
* @param syncGroup The update group to add this set() to, pending updateSyncGroup().  If 0, update immediately.
*/
    public void setX(double outputValue, byte syncGroup) {
        m_currentx=outputValue;
        updateDashboard();
        try {
            m_jaguar.setX(outputValue, syncGroup);
            return;
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
        try {
            m_jaguar.setX(outputValue, syncGroup);
        } catch (NullPointerException e) {
             jaguarErr(e);
        } catch (CANTimeoutException e) {
             jaguarErr(e);
        }
    }

/**
* {@inheritDoc}
*/
    public void startLiveWindowMode() {
        m_jaguar.startLiveWindowMode();
    }

/**
* {@inheritDoc}
*/
    public void stopLiveWindowMode() {
        m_jaguar.stopLiveWindowMode();
    }

/**
* Common interface for stopping a motor.
*
* @deprecated Use disableControl instead.
*/
    public void stopMotor() {
        this.disableControl();
    }

/**
* {@inheritDoc}
*/
    public void updateTable() {
        m_jaguar.updateTable();
    }
}
