// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.Igknighters2015.subsystems;

import org.usfirst.frc3173.Igknighters2015.Robot;
import org.usfirst.frc3173.Igknighters2015.RobotMap;
import org.usfirst.frc3173.Igknighters2015.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Elevation extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANTalon elevationMotor = RobotMap.elevationElevationMotor;
    AnalogPotentiometer potentiometer = RobotMap.elevationPotentiometer;
    DoubleSolenoid elevationFrontPneumatic = RobotMap.elevationElevationFrontPneumatic;
    DoubleSolenoid elevationRearPneumatic = RobotMap.elevationElevationRearPneumatic;
    public boolean frontPneumaticState=false;
    public boolean rearPneumaticState=false;
    public final double LOW = 135;//34;
    public final double HIGH = 846;//734;
    public final double MIDDLE = 457; //TODO: this is bad
    public final double TOTE = 135;//38;
    public final double TWO_TOTES = 281;//175;   //Lowest 81
    public final double BIN = 145;//100;
    public final double HOLD_BIN=828;//710;
    public final double TRANSPORT = 147;//90;
    public final double TICKS_PER_INCH = 12.5225; //TODO: this is also bad
    public final double LOW_INCH= 10.75;
    public final double P=30;
    public final double I=0;
    public final double D=0;
    public boolean usingArm = false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Elevation(){
    	super();
    	percentVBusMode();
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	public void elevate(double s){
		elevationMotor.set(s);
		//System.out.println((s+1)*(1023/2.0));
		//elevationMotor.set(s);
		SmartDashboard.putNumber("Position", elevationMotor.getPosition());
	}
	
	public void percentVBusMode(){
		elevationMotor.changeControlMode(CANTalon.ControlMode.PercentVbus);
		elevationMotor.enableControl();
		setUsingArm(false);
	}
	
	public void positionMode(){
    	setUsingArm(true);
		elevationMotor.changeControlMode(CANTalon.ControlMode.Position);
    	elevationMotor.setProfile(0);
    	elevationMotor.setFeedbackDevice(CANTalon.FeedbackDevice.AnalogPot);
    	elevationMotor.setPID(P,I,D);
    	elevationMotor.setForwardSoftLimit(900);
    	elevationMotor.enableForwardSoftLimit(false);
    	elevationMotor.setReverseSoftLimit(100);
    	elevationMotor.enableReverseSoftLimit(false);
    	elevationMotor.enableControl();	
	}
	
	public double getPosition(){
		return elevationMotor.getPosition();
	}
	
	public CANTalon.ControlMode getControlMode(){
		return elevationMotor.getControlMode();
	}
	
	public CANTalon getMotor(){
		return elevationMotor;
	}
	
	public void toggleFrontPneumatic(){
		if(frontPneumaticState){
			elevationFrontPneumatic.set(DoubleSolenoid.Value.kReverse);
			frontPneumaticState=false;
			SmartDashboard.putBoolean("Front Elevation Pnematic", false);
		}else{
			elevationFrontPneumatic.set(DoubleSolenoid.Value.kForward);
			frontPneumaticState=true;
			SmartDashboard.putBoolean("Front Elevation Pnematic", true);

		}
	}
	
	public void toggleRearPneumatic(){
		if(rearPneumaticState){
			elevationRearPneumatic.set(DoubleSolenoid.Value.kReverse);
			rearPneumaticState=false;
			SmartDashboard.putBoolean("Rear Elevation Pnematic", false);
		}else{
			elevationRearPneumatic.set(DoubleSolenoid.Value.kForward);
			rearPneumaticState=true;
			SmartDashboard.putBoolean("Rear Elevation Pnematic", true);
		}
	}
	
	public void openRearPneumatic(){
		elevationRearPneumatic.set(DoubleSolenoid.Value.kForward);
		SmartDashboard.putBoolean("Rear Elevation Pnematic", true);
	}
	
	public void closeRearPneumatic(){
		elevationRearPneumatic.set(DoubleSolenoid.Value.kReverse);
		SmartDashboard.putBoolean("Rear Elevation Pnematic", false);
	}
	
	public void openFrontPneumatic(){
		elevationFrontPneumatic.set(DoubleSolenoid.Value.kForward);
		SmartDashboard.putBoolean("Front Elevation Pnematic", true);
	}
	
	public void closeFrontPneumatic(){
		elevationFrontPneumatic.set(DoubleSolenoid.Value.kReverse);
		SmartDashboard.putBoolean("Front Elevation Pnematic", false);
	}
	
	public double PosToInch(double deltaPos){
		return (deltaPos / TICKS_PER_INCH); 
	}
	
	public boolean isArmBeingUsed(){
		return usingArm;
	}
	
	public void setUsingArm(boolean b){
		usingArm=b;
	}

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new ElevationElevate());
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}

