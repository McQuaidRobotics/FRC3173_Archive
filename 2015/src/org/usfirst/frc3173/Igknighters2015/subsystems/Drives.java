// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.Igknighters2015.subsystems;

import org.usfirst.frc3173.Igknighters2015.Robot;
import org.usfirst.frc3173.Igknighters2015.RobotMap;
import org.usfirst.frc3173.Igknighters2015.commands.*;

import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Drives extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	final double DELTA = .1;
	
	public Drives(){
		super();
	}
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	public void setDriveSpeed(/*RobotDrive RoboDrives*/double l, double r){
		//RoboDrives.tankDrive(Robot.oi.leftJoystick.getY(), Robot.oi.rightJoystick.getY());
		//double[] values = smoothDrives();
		
		//RoboDrives.tankDrive(values[0], values[1]);
		RobotMap.drivesFirstLeft.set(l);
		RobotMap.drivesSecondLeft.set(l);
		RobotMap.drivesFirstRight.set(-r);
		RobotMap.drivesSecondRight.set(-r);
	}

	public double[] smoothDrives(){
		double[] values = new double[2];
		double lower = 0;
		values[0] = Robot.oi.leftJoystick.getY();
		values[1] = Robot.oi.rightJoystick.getY();
		
		//If both inputs are less than delta, don't change them
		if(values[0] < DELTA && values[1] < DELTA)
		{
			return values;
		}
		//If one or both is greater than delta and their difference is less than delta, average 
		else if((values[0] > DELTA || values[1] > DELTA) && (values[0] - values[1] < DELTA)) 
		{
			double average = (values[0] + values[1]) / 2;
			values[0] = average;
			values[1] = average;
		}
		//If the difference is greater than or equal to delta, smooth values rather than giving full output
		else if(values[0] - values[1] >= DELTA || values[1] - values[0] >= DELTA)
		{
			if(values[0] > values[1])
			{
				lower = values[1];
			}
			else if(values[1] > values[0])
			{
				lower = values[0];
			}
			
			values[0] = lower + (DELTA * values[0]);
			values[1] = lower + (DELTA * values[1]);
		}
		
		return values;
	}
	
	public void setRampRate(double e){
		RobotMap.drivesFirstLeft.setVoltageRampRate(e);
		RobotMap.drivesSecondLeft.setVoltageRampRate(e);
		RobotMap.drivesFirstRight.setVoltageRampRate(e);
		RobotMap.drivesSecondRight.setVoltageRampRate(e);
	}
	
	
	
	
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new DriveWithJoysticks());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}

