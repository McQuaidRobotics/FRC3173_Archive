// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.Igknighters2015.subsystems;

import org.usfirst.frc3173.Igknighters2015.RobotMap;
import org.usfirst.frc3173.Igknighters2015.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Acquisition extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANTalon acquisitionLeft = RobotMap.acquisitionAcquisitionLeft;
    CANTalon acquisitionRight = RobotMap.acquisitionAcquisitionRight;
    DoubleSolenoid acquisition = RobotMap.acquisitionAcquisition;
    int leftWheelState;
    int rightWheelState;
    public boolean acquisitionPneumaticState=false;
    public final double ACQUISITION_WHEEL_SPEED=.3;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void acquisitionPneumaticToggle(){
    	if(acquisitionPneumaticState){
			acquisition.set(DoubleSolenoid.Value.kReverse);
			acquisitionPneumaticState=false;
		}else{
			acquisition.set(DoubleSolenoid.Value.kForward);
			acquisitionPneumaticState=true;
		}
    	SmartDashboard.putBoolean("Acquisiton Pneumatic State", acquisitionPneumaticState);
    }
    
    public void setAcquisitionPneumatic(boolean b){
    	if(b){
    		acquisition.set(DoubleSolenoid.Value.kForward);
    		acquisitionPneumaticState=true;
    	}else{
    		acquisition.set(DoubleSolenoid.Value.kReverse);
    		acquisitionPneumaticState=false;
    	}
    	SmartDashboard.putBoolean("Acquisiton Pneumatic State", acquisitionPneumaticState);
    }
    
    public void setLeftAcquisitionForward(){
    	if(leftWheelState==1){
    		acquisitionLeft.set(0);
    		leftWheelState=0;
    	}else{
    		acquisitionLeft.set(ACQUISITION_WHEEL_SPEED);
    		leftWheelState=1;
    	}
    	if(leftWheelState==1){
    		SmartDashboard.putString("Left Wheel State", "Forward");
    	}else if(leftWheelState==0){
    		SmartDashboard.putString("Left Wheel State", "Stopped");
    	}else{
    		SmartDashboard.putString("Left Wheel State", "Backward");
    	}
    }
    public void setLeftAcquisitionBackward(){
    	if(leftWheelState==-1){
    		acquisitionLeft.set(0);
    		leftWheelState=0;
    	}else{
    		acquisitionLeft.set(-ACQUISITION_WHEEL_SPEED);
    		leftWheelState=-1;
    	}
    	if(leftWheelState==1){
    		SmartDashboard.putString("Left Wheel State", "Forward");
    	}else if(leftWheelState==0){
    		SmartDashboard.putString("Left Wheel State", "Stopped");
    	}else{
    		SmartDashboard.putString("Left Wheel State", "Backward");
    	}
    }
    public void setRightAcquisitionForward(){
    	if(rightWheelState==1){
    		acquisitionRight.set(0);
    		rightWheelState=0;
    	}else{
    		acquisitionRight.set(-ACQUISITION_WHEEL_SPEED);
    		rightWheelState=1;
    	}
    	if(rightWheelState==1){
    		SmartDashboard.putString("Right Wheel State", "Forward");
    	}else if(rightWheelState==0){
    		SmartDashboard.putString("Right Wheel State", "Stopped");
    	}else{
    		SmartDashboard.putString("Right Wheel State", "Backward");
    	}
    }
    public void setRightAcquisitionBackward(){
    	if(rightWheelState==-1){
    		acquisitionRight.set(0);
    		rightWheelState=0;
    	}else{
    		acquisitionRight.set(ACQUISITION_WHEEL_SPEED);
    		rightWheelState=-1;
    	}
    	if(rightWheelState==1){
    		SmartDashboard.putString("Right Wheel State", "Forward");
    	}else if(rightWheelState==0){
    		SmartDashboard.putString("Right Wheel State", "Stopped");
    	}else{
    		SmartDashboard.putString("Right Wheel State", "Backward");
    	}
    }
    
    public void stopWheels(){
    	acquisitionRight.set(0);
    	acquisitionLeft.set(0);
    	SmartDashboard.putString("Left Wheel State", "Stopped");
    	SmartDashboard.putString("Right Wheel State", "Stopped");
    }

	public boolean getLimitSwitch() {
		// TODO Auto-generated method stub
		return acquisitionLeft.isRevLimitSwitchClosed();
	}
}

