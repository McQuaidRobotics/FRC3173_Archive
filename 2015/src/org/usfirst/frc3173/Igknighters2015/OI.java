// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.Igknighters2015;

import org.usfirst.frc3173.Igknighters2015.commands.*;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	//new line
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton leftWheelSuckIn;
    public JoystickButton leftWheelPushOut;
    public Joystick leftJoystick;
    public JoystickButton rightWheelSuckIn;
    public JoystickButton rightWheelPushOut;
    public JoystickButton changeToPositionButton;
   // public JoystickButton changeToVBUSButton;
    public JoystickButton acquisitionPneumaticButton;
    public JoystickButton transportButton;
    public Joystick rightJoystick;
    public JoystickButton binHolderPneumaticButton;
    public JoystickButton elevationFrontPneumaticButton;
    public JoystickButton elevationRearPneumaticButton;
    public JoystickButton autoStackOneButton;
    public JoystickButton putStackDown;
    public JoystickButton cancelEverythingButton;
    public JoystickButton gamepadVBus;
    public JoystickButton stopAcquisitionWheels;
    public JoystickButton gamepadCancelEverything;
    public JoystickButton gamepadTransportMode;
    public Joystick gamepad;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        gamepad = new Joystick(2);
        
        elevationRearPneumaticButton = new JoystickButton(gamepad, 6);
        elevationRearPneumaticButton.whenPressed(new ElevationRearPneumaticToggle());
        elevationFrontPneumaticButton = new JoystickButton(gamepad, 5);
        elevationFrontPneumaticButton.whenPressed(new ElevationFrontPneumaticToggle());
        binHolderPneumaticButton = new JoystickButton(gamepad, 3);
        binHolderPneumaticButton.whenPressed(new BinHolderPneumaticToggle());
        autoStackOneButton = new JoystickButton(gamepad, 2);
        autoStackOneButton.whenPressed(new StackOneTote());
        putStackDown = new JoystickButton(gamepad, 1);
        putStackDown.whenPressed(new PutStackDown());
        //gamepadVBus = new JoystickButton(gamepad, 4);
        //gamepadVBus.whenPressed(new ChangeToVBUS());
        gamepadCancelEverything = new JoystickButton(gamepad, 4);
        gamepadCancelEverything.whenPressed(new CancelEverything());
        gamepadTransportMode = new JoystickButton(gamepad,9);
        gamepadTransportMode.whenPressed(new GoToTransportHeight());
        
        
        
        rightJoystick = new Joystick(1);
        changeToPositionButton = new JoystickButton(rightJoystick, 2);
        changeToPositionButton.whenPressed(new ChangeToPosition());
        //changeToVBUSButton = new JoystickButton(rightJoystick, 1);
        //changeToVBUSButton.whenPressed(new ChangeToVBUS());
        acquisitionPneumaticButton = new JoystickButton(rightJoystick, 3);
        acquisitionPneumaticButton.whenPressed(new AcquisitionPneumatic());
        rightWheelPushOut = new JoystickButton(rightJoystick, 5);
        rightWheelPushOut.whenPressed(new AcquisitionRightWheelPushOut());
        rightWheelSuckIn = new JoystickButton(rightJoystick, 4);
        rightWheelSuckIn.whenPressed(new AcquisitionRightWheelSuckIn());
        transportButton = new JoystickButton(rightJoystick, 8);
        transportButton.whenPressed(new GoToTransportHeight());
        
        leftJoystick = new Joystick(0);        
        leftWheelPushOut = new JoystickButton(leftJoystick, 4);
        leftWheelPushOut.whenPressed(new AcquisitionLeftWheelPushOut());
        leftWheelSuckIn = new JoystickButton(leftJoystick, 5);
        leftWheelSuckIn.whenPressed(new AcquisitionLeftWheelSuckIn());
        cancelEverythingButton = new JoystickButton(leftJoystick, 11);
        cancelEverythingButton.whenPressed(new CancelEverything());

        stopAcquisitionWheels = new JoystickButton(leftJoystick, 3);
        stopAcquisitionWheels.whenPressed(new StopAcquisitionWheels());

	    
        // SmartDashboard Buttons
        /*SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("AcquisitionLeftWheelSuckIn", new AcquisitionLeftWheelSuckIn());

        SmartDashboard.putData("AcquisitionRightWheelSuckIn", new AcquisitionRightWheelSuckIn());

        SmartDashboard.putData("AcquisitionLeftWheelPushOut", new AcquisitionLeftWheelPushOut());

        SmartDashboard.putData("AcquisitionRightWheelPushOut", new AcquisitionRightWheelPushOut());

        SmartDashboard.putData("AcquisitionPneumatic", new AcquisitionPneumatic());

        SmartDashboard.putData("BinHolderPneumaticToggle", new BinHolderPneumaticToggle());

        SmartDashboard.putData("DriveWithJoysticks", new DriveWithJoysticks());

        SmartDashboard.putData("ElevationElevate", new ElevationElevate());

        SmartDashboard.putData("ElevationFrontPneumaticToggle", new ElevationFrontPneumaticToggle());

        SmartDashboard.putData("ElevationRearPneumaticToggle", new ElevationRearPneumaticToggle());*/


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }

    public Joystick getGamepad() {
        return gamepad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

