// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3173.IgKnighters2013.commands;
import edu.wpi.first.wpilibj.DriverStationLCD;
import edu.wpi.first.wpilibj.SensorBase;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3173.IgKnighters2013.Robot;
import org.usfirst.frc3173.IgKnighters2013.RobotMap;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.buttons.Button;
import org.usfirst.frc3173.IgKnighters2013.subsystems.Drives;
/**
 *@author Cosmo Viola
 */
public class  DriveWithJoysticks extends Command {
    //Gyro gyro1 = RobotMap.driveGyro;
   // Gyro gyro1 = RobotMap.driveGyro;
    private double speed;
    public DriveWithJoysticks() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drives);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        RobotMap.driverstation.println(DriverStationLCD.Line.kUser1,1,this.toString() + " starting");
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if(Robot.oi.leftJoystick.getRawButton(3)){//refers to lower left button on the joystick top
            RobotMap.driverstation.println(DriverStationLCD.Line.kUser2,1,"30% speed                       ");
            speed = 0.3;
           
        }
        else if(Robot.oi.leftJoystick.getRawButton(4)){//refers to lower right button on joystick top
            RobotMap.driverstation.println(DriverStationLCD.Line.kUser2,1,"100% speed                     " );
            speed = 1;
             
        }
        else {
            RobotMap.driverstation.println(DriverStationLCD.Line.kUser2,1,"60% speed                      ");
            speed = 0.6;
        } 
        if(!(Robot.oi.leftJoystick.getRawButton(1))){//refers to trigger
            if(Robot.oi.leftJoystick.getRawButton(2)){//causes 50% turning speed when joystic thumb button is pressed
                Robot.drives.mecanumDrive(Robot.oi.getX(), Robot.oi.getY(), Robot.oi.getRotation()/2,speed);
            }else{
                Robot.drives.mecanumDrive(Robot.oi.getX(), Robot.oi.getY(), Robot.oi.getRotation(),speed);
            }
        }else{
     //       Robot.drives.mecanumDriveAbsolute(Robot.oi.getX(), Robot.oi.getY(), Robot.oi.getRotation(), gyro1.getAngle());
        }
        //System.out.println("LX: "+Robot.oi.getX()+ "; LY: "+Robot.oi.getY()+"; RX: "+Robot.oi.getRotation());
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        
            return false;
        
    }
    // Called once after isFinished returns true
    protected void end() {
         Robot.drives.mecanumDrive(0, 0, 0,0);
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        Robot.drives.mecanumDrive(0, 0, 0,0);
    }
}
