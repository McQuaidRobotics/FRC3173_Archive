/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.usfirst.frc3173.IgKnighters2013.commands;
import edu.wpi.first.wpilibj.DriverStationLCD;
import edu.wpi.first.wpilibj.SensorBase;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3173.IgKnighters2013.Robot;
import org.usfirst.frc3173.IgKnighters2013.RobotMap;
import edu.wpi.first.wpilibj.Gyro;
import org.usfirst.frc3173.IgKnighters2013.OI;
import org.usfirst.frc3173.IgKnighters2013.subsystems.Drives;
import org.usfirst.frc3173.IgKnighters2013.subsystems.Tilter;

    
       
/**
 *
 * @author Csimons2016 and Thomas Skysword
 */
public class TilterTilt extends Command {
    //Gyro gyro1 = RobotMap.driveGyro;
    private boolean goingUp=true;
    private double lastAngle;
    private boolean running = true;
    private double origAngle;
    private int speed = 1;
    public TilterTilt() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.Tilter);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        
        RobotMap.driverstation.println(DriverStationLCD.Line.kUser1,1,this.toString() + " starting");
        //RobotMap.tilterTilter.changeControlMode(edu.wpi.first.wpilibj.CANJaguar.ControlMode.kPosition);
        RobotMap.tilterTilter.setPositionReference(edu.wpi.first.wpilibj.CANJaguar.PositionReference.kPotentiometer);
        /*Robot.Tilter.setPID(10000, .1, .1);
        RobotMap.tilterTilter.enableControl(0.0);*/
            }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        /*if(!RobotMap.tilterTilter.getMode()){
            RobotMap.tilterTilter.changeControlMode(edu.wpi.first.wpilibj.CANJaguar.ControlMode.kPosition);
            RobotMap.tilterTilter.setPositionReference(edu.wpi.first.wpilibj.CANJaguar.PositionReference.kPotentiometer);
            Robot.Tilter.setPID(10000, .1, .1);
            RobotMap.tilterTilter.enableControl(0.0);
        }
        //System.out.println("Potentiometer "+(RobotMap.tilterTilter.getPosition()));
        //System.out.println("Z-axis "+Robot.oi.getTilt());
        //System.out.println("Tilter Angle "+Robot.Tilter.getAngle());
        //Robot.Tilter.setP((Robot.oi.getTilt()+1)/2);
        //if((RobotMap.tilterTilter.getPosition()*2-1)<Robot.oi.getTilt()+.2){
        
        //    Robot.Tilter.setAngle((Robot.oi.getTilt()+1)/2);
            //System.out.println("Up");
        //}else if ((RobotMap.tilterTilter.getPosition()*2-1)>Robot.oi.getTilt()-.2){
         //   Robot.Tilter.setAngle(-0.5);
            //System.out.println("Down");
        //}else{
          //   Robot.Tilter.setAngle(0);
        //}*/
        /*if(Robot.oi.leftJoystick.getRawButton(7)&&Robot.oi.leftJoystick.getRawButton(10)&&running){
            RobotMap.tilterTilter.changeControlMode(edu.wpi.first.wpilibj.CANJaguar.ControlMode.kCurrent);
            System.out.println("Calibrating... Do not release..." +Robot.Tilter.getAngle());
            RobotMap.tilterTilter.disableControl(); 
            if(Robot.Tilter.getAngle()==lastAngle && lastAngle != origAngle){
                if(goingUp){
                    Robot.Tilter.setMin(lastAngle);
                    goingUp=false;
                    System.out.println("MIN= "+ lastAngle);
                    origAngle=lastAngle;
                }else{
                    Robot.Tilter.setMax(lastAngle);
                    goingUp=true;
                    System.out.println("MAX= "+ lastAngle);
                   RobotMap.tilterTilter.setPositionReference(edu.wpi.first.wpilibj.CANJaguar.PositionReference.kPotentiometer);
                    Robot.Tilter.setPID(10000, .1, .1);
                    RobotMap.tilterTilter.enableControl(0.0); 
                    running = false;
                }
            }
            if(goingUp){
                Robot.Tilter.setAngle(-1);
            }else{
                Robot.Tilter.setAngle(1);
            }
        }else{*/
        if(Robot.oi.leftJoystick.getRawButton(7)){
            //RobotMap.driverstation.println(DriverStationLCD.Line.kUser4,1,"MANUAL TILT ENABLED");
        Robot.Tilter.setAngle(Robot.oi.getTilt());
        }else if(Robot.oi.leftJoystick.getRawButton(9)||Robot.oi.gamepad.getRawButton(1)){
            if(Robot.Tilter.getAngle()>.11){
            Robot.Tilter.setAngle(-1);
            }else{
                Robot.Tilter.setAngle(0);
            }
        }else if(Robot.oi.leftJoystick.getRawButton(11)||Robot.oi.gamepad.getRawButton(2)){
            Robot.Tilter.setAngle(1);
        }else if(Robot.oi.leftJoystick.getRawButton(10)){
            if(Robot.Tilter.getAngle()>.11){
             Robot.Tilter.setAngle(-.75);
             }else{
                Robot.Tilter.setAngle(0);
            }
        }else if(Robot.oi.leftJoystick.getRawButton(12)){
            Robot.Tilter.setAngle(.75);
        }else if(!Robot.oi.leftJoystick.getRawButton(7)){
            Robot.Tilter.setAngle(0);
        }else{
            Robot.Tilter.setAngle(0);
            
        }
        System.out.println(Robot.oi.getTilt());
        /*if(Robot.oi.leftJoystick.getRawButton(12)||Robot.oi.leftJoystick.getRawButton(10)){
            //speed=2;
            
        }else{
            speed=1;
        }*/
        int tempi =(int) (((-RobotMap.tilterTilter.getPosition()+Tilter.getMax())/((Tilter.getMin()-Tilter.getMax())))*290);
        
        double temp = -(((double)tempi)/10);
        //DecimalFormat fmt = new DecimalFormat("0.###");
        RobotMap.driverstation.println(DriverStationLCD.Line.kUser4,1,""+temp+" Degrees.");
        System.out.println(RobotMap.tilterTilter.getPosition());
           /* origAngle = Robot.Tilter.getAngle();
            running = true;
            System.out.println(Robot.Tilter.getAngle());
            Robot.Tilter.setAngle(Robot.Tilter.angles+(Robot.oi.getTilt()*.1));
        //}
        if(Robot.oi.gamepad.getRawButton(1)){
            Robot.Tilter.setAngle("Midfield");
            System.out.println("Midfield");
        }else if(Robot.oi.gamepad.getRawButton(2)){
            Robot.Tilter.setAngle("Climb"); 
            System.out.println("Climb");
        }else if(Robot.oi.gamepad.getRawButton(4)){
            Robot.Tilter.setAngle("Feeder");
            System.out.println("Feeder");
        }else if(Robot.oi.gamepad.getRawButton(8)){
            Robot.Tilter.setAngle("Auto");
            System.out.println("Auto");
            //Robot.Tilter.angles = vision out put here;
        }
        
       lastAngle = Robot.Tilter.getAngle();*/
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
         Robot.Tilter.setAngle(0);
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
         Robot.Tilter.setAngle(0);
    }
}
