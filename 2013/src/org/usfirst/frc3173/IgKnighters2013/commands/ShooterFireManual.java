/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.usfirst.frc3173.IgKnighters2013.commands;
import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.DriverStationLCD;
import edu.wpi.first.wpilibj.SensorBase;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3173.IgKnighters2013.Robot;
import org.usfirst.frc3173.IgKnighters2013.RobotMap;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.Relay;
import org.usfirst.frc3173.IgKnighters2013.OI;
import org.usfirst.frc3173.IgKnighters2013.subsystems.Shooter;

/**
 *
 * @author Jon Aho and Thomas Skysword
 */
public class ShooterFireManual extends Command{
    private boolean previousGamePadState11= false;
    private boolean previousGamePadState12= false;
    private boolean previousGamePadState4=false;
    private boolean asunder = true;//refers to toggles throughout code
    private boolean firstRun = true;
    private boolean isSpeed= false;
    private double interval=1;
    public ShooterFireManual() {
         // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    protected void initialize() {
        firstRun=true;
        isSpeed = false;
        interval = 1;
        RobotMap.driverstation.println(DriverStationLCD.Line.kUser1,1,this.toString() + " starting");
    }

    protected void execute() {
        if(Robot.oi.gamepad.getRawButton(11)&&!previousGamePadState11){//acts as a toggle. uses left stick button
           // Robot.shooter.downManualSpeed();
            Robot.shooter.downManualSpeedB();
        }
        else if(Robot.oi.gamepad.getRawButton(12)&&!previousGamePadState12){//acts as a toggle. uses right stick button
            //Robot.shooter.upManualSpeed();
            Robot.shooter.upManualSpeedB();
        }
        if(Robot.oi.gamepad.getRawButton(3)&&Robot.oi.gamepad.getRawButton(8)&&Robot.oi.gamepad.getRawButton(6)){//will house auto code eventually
            Robot.shooter.fireTower();
        }else if(Robot.oi.gamepad.getRawButton(3)&&Robot.oi.gamepad.getRawButton(8)){//will house auto code eventually
            Robot.shooter.fireAuto();
        }else if(Robot.oi.gamepad.getRawButton(3)){//refers to the B button. shoots frisbee
            //if(RobotMap.shooting.get()){
                Robot.shooter.fireManual(true);
            /*}else{
                Robot.shooter.fireManual(false);
            }*/
        }else{
            Robot.shooter.fireManual(false);
        }
        if(Robot.oi.leftJoystick.getRawButton(8)){//refers to top inner row of joystick buttons. will kill shooter
            Robot.shooter.setSpeed(0);
            //RobotMap.shooterShooter.changeControlMode(CANJaguar.ControlMode.kPercentVbus);
        }
        if(Robot.oi.gamepad.getRawButton(7)){//lower left gamepad trigger allows for +- 50 RPM
            interval=0.2;//250*0.2 = 50
        }else{
            interval=1;
        }
        Robot.shooter.setInterval(interval);
        RobotMap.driverstation.println(DriverStationLCD.Line.kUser3,1,Robot.shooter.getSpeedB()+"; "+ RobotMap.shooterShooter.getSpeed());
        System.out.println(RobotMap.shooterShooter.getSpeed());
        boolean run= Robot.shooter.checkRPM(firstRun);//checks current mode of robot. Reports true if speed, false if percentVBus
        if(run){//if speedMode
            //
            if(firstRun){//if the firstRun is true. will run the seccond time through this loop
                firstRun = false;
            }else if(!firstRun && !isSpeed){//will run the first time this if statement is called. resets the value of firstRun
                firstRun = true;
            }else{
                Robot.shooter.setSpeedA();//will run the third and every other time until run returns false
            }
            isSpeed=true;
        }else{
            //
            if(firstRun){ //if the firstRun is true. will run the seccond time through this loop
                firstRun = false;
            }else if(!firstRun && isSpeed){//will run the first time this if statement is called. resets the value of firstRun
                firstRun = true;
            }else{//will run the third and every other time until run returns true
                if(Robot.shooter.manualSpeed==0){ //will not speed up if set to zero
                     Robot.shooter.setSpeedUp(0);
                }else{// runs if not set to zero. will speed up to ~1250
                    Robot.shooter.setSpeedUp(0.75);
                }
            }
            isSpeed=false;
        }
        
        if(Robot.oi.gamepad.getRawButton(4)&&!previousGamePadState4){//asunder. aka acquisition slider value. toggle. Refers to gamepad Y button
            asunder=!asunder;
            
            
        }
        if(Math.abs(Robot.drives.getRawVector(Robot.oi.getX(), Robot.oi.getY()))>.5){
            asunder=false;
        }
        System.out.println(Robot.drives.getRawVector(Robot.oi.getX(), Robot.oi.getY()));
        previousGamePadState4=Robot.oi.gamepad.getRawButton(4);
        previousGamePadState11=Robot.oi.gamepad.getRawButton(11);
        previousGamePadState12=Robot.oi.gamepad.getRawButton(12);
        Robot.shooter.movingAquisition(asunder);
    }

    protected boolean isFinished() {
        return false;
    }

    protected void end() {
    }

    protected void interrupted() {
    }
    
}
