// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.IgKnighters2016;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3173.IgKnighters.utilities.IMU;
import org.usfirst.frc3173.IgKnighters2016.commands.*;
import org.usfirst.frc3173.IgKnighters2016.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Acquisition acquisition;
    public static Drives drives;
    public static Shooter shooter;
    public static Climber climber;
    public Thread visionThread;
    public static SendableChooser obstacle;
    public static SendableChooser position;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Vision vision;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        acquisition = new Acquisition();
        drives = new Drives();
        shooter = new Shooter();
        climber = new Climber();
        vision = new Vision();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        /*obstacle=new SendableChooser();
        obstacle.addDefault("Nothing", new DoNothing());
        obstacle.addObject("Low Bar", new AutonomousLowBar());
        obstacle.addObject("Forward", new AutonomousDriveForward());
        obstacle.addObject("Reverse", new AutonomousDriveReverse());
        SmartDashboard.putData("Obstacle", obstacle);
        
        position=new SendableChooser();
        position.addDefault("Nothing", new DoNothing());
        position.addObject("Auto Shoot", new AutoShoot());
        SmartDashboard.putData("Position", position);*/
//		visionThread=new Thread(new Runnable(){
//			public void run(){
//				while(true){
//					try{
//						vision.printAllVisionInfo(8, 0.5);
//						vision.checkButtons();
//					}catch(Exception e){
//						e.printStackTrace();
//					}
//					/*try {
//						Thread.sleep(100);
//					} catch (InterruptedException e) {
//						// TODO Auto-generated catch block
//						e.printStackTrace();
//					}*/
//				}
//			}
//		});
		try{
//			visionThread.start();
//			visionThread.setPriority(Thread.MIN_PRIORITY);
			SmartDashboard.putString("Autonomous Obstacle", "0");
			SmartDashboard.putString("Autonomous Position", "0");
			SmartDashboard.putNumber("Spinner Percent", 0.7);
			
		}catch (Exception e){
			e.printStackTrace();
		}
		new Thread(new Runnable() {
			@Override
			public void run() {
				IMU imu = new IMU();
				AutoStraight.RRIMU=imu;
				imu.IMUIni();
				System.out.println("IMU ini");				
				int wait = 0;
				while (true) {
					if(wait < 700){
						wait++;
					}else if (wait == 700) {	
						imu.calibration();
					}
					imu.updateOrientation();
					try {
						Thread.sleep(10);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}).start();

    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	if(autonomousCommand!=null){
    		autonomousCommand.cancel();
    	}
    	try{
    		autonomousCommand = new AutonomousCommand();
    		if (autonomousCommand != null) autonomousCommand.start();
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        updateSmartDashboard();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        //RobotMap.shooterSpinnerMotor.set(1);
        vision.getValues();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        //SmartDashboard.putNumber("RPM",RobotMap.shooterSpinnerMotor.getSpeed());
        updateSmartDashboard();
        //vision.printDistanceY();
        //vision.printDistanceX();
        //SmartDashboard.putBoolean("Good Shot?",vision.goodShot(8.0, 0.5));
        //vision.checkButtons();
        RobotMap.visionLED.set(true);
        // TODO reenable the below command
        //vision.printAllVisionInfo(8, 0.5);
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    public void updateSmartDashboard(){
	    try{
    		SmartDashboard.putNumber("Talon 1 Current", RobotMap.drivesRightFirstMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 2 Current", RobotMap.drivesLeftSecondMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 3 Current", RobotMap.drivesLeftFirstMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 4 Current", RobotMap.drivesRightSecondMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 5 Current", RobotMap.acquisitionBeltMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 6 Current", RobotMap.shooterSpinnerMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 7 Current", RobotMap.acquisitionLifterMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 8 Current", RobotMap.climberWinchMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("Talon 9 Current", RobotMap.climberTapeSpringFirstMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("Acquisition Potentiometer", RobotMap.acquisitionLifterMotor.getPosition());
	    	SmartDashboard.putNumber("Spinner Tachometer", RobotMap.shooterSpinnerMotor.getSpeed());
	    	SmartDashboard.putNumber("Right Drives Speed", RobotMap.drivesRightSecondMotor.getSpeed());
	    	SmartDashboard.putNumber("Left Drives Speed", RobotMap.drivesLeftFirstMotor.getSpeed());
	    	SmartDashboard.putNumber("Spinner Voltage", RobotMap.shooterSpinnerMotor.getOutputVoltage());
	    	SmartDashboard.putBoolean("Acquisition Upper Limit", RobotMap.acquisitionLifterMotor.isFwdLimitSwitchClosed());
	    	SmartDashboard.putBoolean("Acquisition Lower Limit", RobotMap.acquisitionLifterMotor.isRevLimitSwitchClosed());
	    	SmartDashboard.putNumber("Gamepad left analog", Robot.oi.gamepad.getY());
	    }catch(Exception e){
	    	System.out.println(e);
	    }
    }
}
