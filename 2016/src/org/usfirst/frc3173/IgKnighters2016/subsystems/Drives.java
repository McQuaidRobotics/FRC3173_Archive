// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.IgKnighters2016.subsystems;

import org.usfirst.frc3173.IgKnighters2016.RobotMap;
import org.usfirst.frc3173.IgKnighters2016.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Drives extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftLeader = RobotMap.drivesLeftFirstMotor;
    private final CANTalon leftFollower = RobotMap.drivesLeftSecondMotor;
    private final CANTalon rightFollower = RobotMap.drivesRightFirstMotor;
    private final CANTalon rightLeader = RobotMap.drivesRightSecondMotor;
    private final RobotDrive controller = RobotMap.drivesController;
    private CANTalon.TalonControlMode controlMode;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	
    	setDefaultCommand(new DriveWithJoysticks());
    	//hehehe hi cosmo if you see this u r wizarrd
    	//hehehe another line of
    	//completely
    	//useless
    	//c
    	// o
    	//  d
    	//   e
    	//turn left and look at DriveWithJoysticks execute().... ehehehehehe
    }
    /**
     * @deprecated Use driveSpeed or driveVoltage instead
     */
    @Deprecated
    public void drive(double leftSpeed, double rightSpeed) {
    	//FWdeKlerk.free(africans);
    	//FidelCasto.initiate(bayofpigsmasterplan);
    	controller.tankDrive(leftSpeed/63.837,rightSpeed/63.837);
    }
    
    public void drivePercentVbus(double leftSpeed, double rightSpeed){
   	 	if ( controlMode != CANTalon.TalonControlMode.PercentVbus){
   	 		setControlMode(CANTalon.TalonControlMode.PercentVbus);
    	}
   	 	controller.tankDrive(-leftSpeed,-rightSpeed);
   	 	//System.out.println("Left: "+leftSpeed+"Right: "+rightSpeed);
    }
/*    public void driveSpeed(double leftSpeed, double rightSpeed){
    	if ( controlMode != CANTalon.TalonControlMode.Speed){
    		setControlMode(CANTalon.TalonControlMode.Speed);
    		leftLeader.setPID(SmartDashboard.getNumber("LeftLeaderP",100), SmartDashboard.getNumber("LeftLeaderI",.1), SmartDashboard.getNumber("LeftLeaderD",.1));
    		rightLeader.setPID(SmartDashboard.getNumber("RightLeaderP",100), SmartDashboard.getNumber("RightLeaderI",.1), SmartDashboard.getNumber("RightLeaderD",.1));
    	}
    	controller.tankDrive(leftSpeed/63.837,rightSpeed/63.837);
    }*/
    
    private void setControlMode(TalonControlMode mode) {
		leftLeader.changeControlMode(mode);
		rightLeader.changeControlMode(mode);
		controlMode = mode;
		
	}

	public Drives(){
    	initializeMotor(leftLeader);
    	initializeMotor(rightFollower);
    	initializeMotor(leftFollower);
    	initializeMotor(rightLeader);
    	
    	leftFollower.changeControlMode(CANTalon.TalonControlMode.Follower);
    	leftFollower.set(leftLeader.getDeviceID());
    	rightFollower.changeControlMode(CANTalon.TalonControlMode.Follower);
    	rightFollower.set(rightLeader.getDeviceID());
    	
    	SmartDashboard.putNumber("LeftLeaderP",100);
    	SmartDashboard.putNumber("LeftLeaderI",.1);
    	SmartDashboard.putNumber("LeftLeaderD",.1);
    	
    	SmartDashboard.putNumber("RightLeaderP",100);
    	SmartDashboard.putNumber("RightLeaderI",.1);
    	SmartDashboard.putNumber("RightLeaderD",.1);
    }
    
    public void initializeMotor(CANTalon motor) {
    	motor.changeControlMode(CANTalon.TalonControlMode.Speed);
    	motor.setFeedbackDevice(CANTalon.FeedbackDevice.QuadEncoder);
    	motor.configEncoderCodesPerRev(512);
    }
    
    
    
    
}

