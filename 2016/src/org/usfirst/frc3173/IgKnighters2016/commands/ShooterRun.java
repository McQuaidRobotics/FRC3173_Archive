// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.IgKnighters2016.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3173.IgKnighters2016.Robot;

/**
 *
 */
public class ShooterRun extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_speed;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ShooterRun(double speed) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_speed = speed*(Robot.shooter.MAX_SPEED-Robot.shooter.MIN_SPEED)+Robot.shooter.MIN_SPEED;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	/*if(Robot.shooter.isSpinning()){
    		//System.out.println(Robot.shooter.isSpinning());
    		Robot.shooter.spinPercentVBus(0);
    		SmartDashboard.putNumber("Shooter VBus Speed", 0);
    	}
    	else{
    		//System.out.println(Robot.shooter.isSpinning());
    		//Robot.shooter.spin(SmartDashboard.getNumber("Spinner Percent"));
    		Robot.shooter.spinPercentVBus(m_speed);
    		SmartDashboard.putNumber("Shooter VBus Speed", m_speed);
    	}*/
    	System.out.println("ini");
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//Robot.shooter.spinPercentVBus((-Robot.oi.rightJoystick.getZ()+1)*2);
    	if(Robot.shooter.getMode()){
    		Robot.shooter.spinVoltage((-Robot.oi.rightJoystick.getZ()+1)/2.0);
    	}else{
    		Robot.shooter.spinSpeed(((-Robot.oi.rightJoystick.getZ()+1)/2.0)*(Robot.shooter.MAX_SPEED-Robot.shooter.MIN_SPEED)+Robot.shooter.MIN_SPEED);
    		System.out.println(((-Robot.oi.rightJoystick.getZ()+1)/2.0)*(Robot.shooter.MAX_SPEED-Robot.shooter.MIN_SPEED)+Robot.shooter.MIN_SPEED);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        //System.out.println("Isfin");
    	//return true;
        return false;
        
    }

    // Called once after isFinished returns true
    protected void end() {
    	//Robot.shooter.spinPercentVBus(0); for percentVBus
    	Robot.shooter.spinVoltage(-1);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
