// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3173.IgKnighters2016.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3173.IgKnighters2016.Robot;

/**
 *
 */
public class AutonomousCommand extends CommandGroup {
	public Command obstacleCommand;
	public Command positionCommand;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	switch(SmartDashboard.getString("Autonomous Obstacle")){
		case "0":
			break;
		case "1":
			addSequential(new AutonomousLowBar());
			break;
		//case "2":
		//	addSequential(new AutonomousPortcullis());
		//	break;
		//case "3":
		//	addSequential(new AutonomousFlippyRamps());
		//	break;
		case "2":
			addSequential(new AutonomousMoat());
			break;
		case "3":
			addSequential(new AutonomousRamparts());
			break;
		case "4":
			//addSequential(new AutonomousRockWall());
			addSequential(new AutonomousLowBarReverse());
			break;
		case "5":
			addSequential(new AutonomousRoughTerrain());
			break;
		case "6":
			addSequential(new AutoDriveTest());
			break;
		case "7":
			addSequential(new AutonomousTurn180());
			break;
    	}
    	switch(SmartDashboard.getString("Autonomous Position")){
		case "0":
			break;
		case "1":
			addSequential(new AutonomousFirstPositionShoot());
			break;
		case "2":
			addSequential(new AutonomousSecondPositionShoot());
			break;
		case "3":
			addSequential(new AutonomousThirdPositionShoot());
			break;
		case "4":
			addSequential(new AutonomousFourthPositionShoot());
			break;
		case "5":
			addSequential(new AutonomousFifthPositionShoot());
			break;
		case "auto":
			addSequential(new AutonomousAcquisitionToLevel());
			addSequential(new AutoShoot());
			break;
    	}
    	//addSequential((Command) Robot.obstacle.getSelected());
    	//addSequential((Command) Robot.position.getSelected());
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
